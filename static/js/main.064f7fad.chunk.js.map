{"version":3,"sources":["screenSizes.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["toWidthHeight","resolutions","converted","i","length","split","width","height","push","Number","trim","goalViewports","id","viewports","map","viewport","isPhone","reduce","list","current","idx","Root","styled","ButtonRow","ResolutionSet","div","Resolutions","Resolution","SetUrl","App","props","useState","url","setUrl","urlSet","setUrlSet","forceWidescreen","setForceWidescreen","viewportChoice","setViewportChoice","frameWidth","Math","max","frameHeight","min","type","value","onChange","e","target","onClick","checked","chunk","viewportSet","name","src","title","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.064f7fad.chunk.js","sourcesContent":["\ninterface WidthAndHeight {\n    width: number,\n    height: number,\n}\nfunction toWidthHeight(resolutions: string[]) : WidthAndHeight[] {\n    const converted: WidthAndHeight[] = [];\n    for(let i = 0; i < resolutions.length; i+= 1) {\n        const [width, height] = resolutions[i].split('x');\n        converted.push({\n            width: Number(width.trim()),\n            height: Number(height.trim())\n        })\n    }\n    return converted;\n}\nconst commonViewports = [\n    {\n        id: 'desktops',\n        viewports: toWidthHeight([\n            '1024 x 768', // desktop and above,\n            '1024 x 724', // fine and dandy\n            '1366 x 609', // Some Chromebooks\n        ])\n    },\n    {\n        id: 'iPads',\n        viewports: toWidthHeight([\n            '1024 x 1366', // Pro\n            '768 x 1024', // other models\n        ])\n    },\n    {\n        id: 'AndroidTablets',\n        viewports: toWidthHeight([\n            '600 x 960', // Nexus 7 (2013)\n            '800 x 1280', // Samsung Galaxy Tab 10\n            '1280 x 850', // Chromebook Pixel\n        ])\n    },\n    {\n        id: 'iPhone',\n        viewports: toWidthHeight([\n            '414 x 896', // XR, XS max\n            '375 x 812', // XS, X\n            '414 x 736', // 8 plus, 7 plus, 6, 6 plus\n            '375 x 667', // 8\n            '320 x 568', // 5\n        ])\n    },\n    {\n        id: 'AndroidPhones',\n        viewports: toWidthHeight([\n            '360 x 740', // Galaxy S7 through S9+, Samsung Galaxy Note 9\n            '480 x 853', // One Plus 3, LG G5, Samsung Galaxy Note 5\n            '412 x 732', // Google Pixel, Google Pixel XL, Google Pixel 2 XL\n            '412 x 824', // Google Pixel 3, Google Pixel 3 XL\n        ])\n    },\n];\n\nexport { commonViewports };","import React, { useState, FC} from 'react';\nimport styled from 'styled-components';\nimport chunk from 'lodash/chunk';\nimport { commonViewports } from './screenSizes';\n\nconst goalViewports = commonViewports\n  .map(({id, viewports}) => {\n    const viewportsWithType = viewports.map(viewport => {\n      return {\n        ...viewport,\n        isPhone: id === 'iPhone' || id === 'AndroidPhones'\n      }\n    })\n    return viewportsWithType;\n  })\n  .reduce((list, current) => [...list, ...current])\n  .map((viewport, idx) => {\n    return {\n      ...viewport,\n      id: idx,\n    }\n  })\n\n  const defaultUrl = process.env.NODE_ENV === 'development' ? 'http://localhost:3000' : '';\n\nconst App: FC =(props) => {\n    const [url, setUrl] = useState(defaultUrl);\n    const [urlSet, setUrlSet] = useState(false);\n    const [forceWidescreen, setForceWidescreen] = useState(false);\n    const [viewportChoice, setViewportChoice] = useState(goalViewports[0]);\n    const { width, height } = viewportChoice;\n    const frameWidth = forceWidescreen ? Math.max(width, height) : width;\n    const frameHeight = forceWidescreen ? Math.min(width, height) : height;\n    return (\n      <Root>\n        {!urlSet && (\n          <SetUrl>\n          <div>Url to host:</div>\n          <input type=\"text\" value={url} onChange={e => setUrl(e.target.value)}/>\n          <button type=\"button\" onClick={e => setUrlSet(true)}>Set</button>\n          </SetUrl>\n        )}\n        {urlSet && (\n          <>\n            <ButtonRow>\n              <label>Force Widescreen: </label>\n              <input type=\"checkbox\" checked={forceWidescreen} onChange={e => setForceWidescreen(!forceWidescreen)} />\n            </ButtonRow>\n            <Resolutions>\n              {chunk(goalViewports, 2).map(viewportSet => (\n                <ResolutionSet>\n                  {viewportSet.map(viewport => (\n                    <Resolution>\n                      <input name=\"resolution\" type=\"radio\" value={viewport.id} checked={viewport.id === viewportChoice.id} onClick={() => setViewportChoice(viewport)}/>\n                      <label>{viewport.width} x {viewport.height} {viewport.isPhone && '(Phone)'}</label>\n                    </Resolution>\n                ))}\n                </ResolutionSet>\n              ))}\n            </Resolutions>\n            Current Resolution: {frameWidth} x {frameHeight}\n            <iframe src={url} title={`width=${width}height=${height}`} height={`${frameHeight}px`} width={`${frameWidth}px`} />\n          </>\n        )}\n      </Root>\n    );\n}\n\nconst Root = styled('div')`\n  display: flex;\n  flex-direction: column;\n  font-size: 18px;\n`;\n\nconst ButtonRow = styled('div')`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n\n  label {\n    margin-left: 10px;\n  }\n  input {\n    width: 20px;\n    height: 20px;\n  }\n`;\n\nconst ResolutionSet = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Resolutions = styled.div`\n  display: flex;\n  flex-direction: row;\n  ${ResolutionSet} + ${ResolutionSet} {\n    margin-left: 10px;\n  }\n`;\n\n\n\nconst Resolution = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst SetUrl = styled('div')`\n  display: flex;\n  flex-direction: row;\n  input {\n    margin-left: 5px;\n    width: 160px;\n  }\n`;\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}